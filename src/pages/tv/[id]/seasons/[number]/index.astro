---
import Card from "@/components/Tv/Episode/Card.astro";
import DetailLayout from "@/layouts/DetailLayout.astro";
import {
  getDetail,
  getSeasonData,
  getVideoCompilationTvSeason,
  getCreditsSeason,
} from "@/utils/data";
import { YouTube } from "@astro-community/astro-embed-youtube";
import { Image } from "astro:assets";
import { format } from "date-fns";
import { FaStar } from "react-icons/fa";

const urlImage = import.meta.env.PUBLIC_TMDB_IMG_URL;

export const prerender = false;

const { id, number } = Astro.params;

const episodes = await getSeasonData(Number(id), Number(number));

const data = (await getDetail("tv", id as string)) as DetailTv;

const videoCompilation = (await getVideoCompilationTvSeason(
  Number(id),
  Number(number)
)) as Array<Video>;

const credits = await getCreditsSeason(Number(id), Number(number));
---

<DetailLayout
  name_transition="tv"
  id={(id as string) ?? ""}
  poster={data.backdrop_path}
  title={`Tv Season ~ ${episodes.name}`}
  description={`Detail of the season tv show with id ${id}`}
>
  <main class="w-full">
    <section
      class="w-full lg:grid lg:grid-cols-3 flex flex-col gap-4 pt-6 px-4"
    >
      <div class="lg:col-span-1 md:self-start self-center">
        <Image
          src={`${urlImage}${episodes.poster_path}`}
          alt={"Poster"}
          inferSize
          loading="eager"
          transition:name={`tv ${id} poster`}
          width={350}
          height={400}
          sizes="(max-width: 768px) 50vw, 30vw"
          class={"object-cover obejct-center lg:-mt-56 md:-mt-48 -mt-36"}
        />
      </div>
      <article class="lg:col-span-2 flex flex-col gap-4">
        <h1
          transition:name={`season ${id} title`}
          class="lg:text-5xl text-3xl font-bold"
        >
          {episodes.name}
        </h1>
        <p class="text-justify lg:text-xl text-lg">{episodes.overview}</p>
        <p class="lg:text-xl text-lg" transition:name={`season ${id} date`}>
          Release : {
            format(
              episodes.air_date ? new Date(episodes.air_date) : new Date(),
              "MMMM dd, yyyy"
            )
          }
        </p>
        <p class="lg:text-xl text-lg">
          Total Eps : {episodes?.episodes?.length}
        </p>
        <p class="lg:text-xl text-lg flex items-center gap-3">
          Rating : {episodes.vote_average.toFixed(2)}
          <FaStar className="text-yellow-500" />
        </p>
      </article>
    </section>
    {
      videoCompilation.length > 0 ? (
        <section class="w-full mt-5 px-4">
          <h1 class="text-3xl font-semibold">Compilation / Trailer Video</h1>
          <section class="slider-list max-w-full overflow-x-auto flex gap-4 pb-5 items-stretch mt-6">
            {videoCompilation.map((video) => (
              <div class="md:w-1/4 w-1/2 flex-shrink-0">
                <YouTube
                  id={video.key}
                  title={video.name}
                  posterQuality="high"
                />
              </div>
            ))}
          </section>
        </section>
      ) : null
    }
    {
      credits.length > 0 ? (
        <section class="w-full mt-5 px-4">
          <h1 class="text-3xl font-semibold">Credits</h1>
          <section class="slider-list max-w-full overflow-x-auto flex gap-4 pb-5 items-stretch mt-6">
            {credits.map((credit) => (
              <div class="md:w-1/4 w-1/2 flex-shrink-0 card rounded-lg">
                {credit.profile_path === null ? (
                  <div class="w-full aspect-[1/.8] bg-white grid place-items-center text-black font-bold">
                    Photo not found
                  </div>
                ) : (
                  <Image
                    src={`${urlImage}${credit.profile_path}`}
                    alt={`${credit.name}`}
                    inferSize
                    loading="lazy"
                    class="w-full object-cover object-center aspect-[1/.8]"
                  />
                )}
                <div class="mt-4">
                  <h1 class="text-center">{`${credit.name} ( ${credit.original_name} )`}</h1>
                  <p class="text-center">{credit.character}</p>
                </div>
              </div>
            ))}
          </section>
        </section>
      ) : null
    }
    <section class="w-full mt-5 px-4">
      <h1 class="text-2xl font-bold">All Episode</h1>
      <section
        class="w-full grid lg:grid-cols-4 md:grid-cols-3 grid-cols-2 gap-4 mt-4"
      >
        {
          episodes.episodes.map((episode: EpsiodeFromSeason) => (
            <Card id_tv={data.id} {...episode} />
          ))
        }
      </section>
    </section>
  </main>
</DetailLayout>

<style itemscope>
  .slider-list {
    scroll-snap-type: x mandatory;
  }

  .slider-list > div {
    scroll-snap-align: start;
  }

  .slider-list::-webkit-scrollbar {
    height: 8px;
  }

  .slider-list::-webkit-scrollbar-track {
    background: #f1f1f1;
  }

  .slider-list::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 10px;
  }

  .slider-list::-webkit-scrollbar-thumb:hover {
    background: #555; /* Color of the scrollbar thumb on hover */
  }
</style>
